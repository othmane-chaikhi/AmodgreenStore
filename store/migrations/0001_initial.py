# Generated by Django 4.2.23 on 2025-08-10 03:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Biographie')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='Ville')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=40, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('name_ar', models.CharField(blank=True, max_length=100, verbose_name='Nom (Arabe)')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('full_name', models.CharField(max_length=200, verbose_name='Nom complet')),
                ('phone', models.CharField(max_length=20, verbose_name='Numéro de téléphone')),
                ('city', models.CharField(max_length=100, verbose_name='Ville')),
                ('address', models.TextField(verbose_name='Adresse complète')),
                ('notes', models.TextField(blank=True, verbose_name='Remarques')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('contacted', 'Client contacté'), ('confirmed', 'Confirmée'), ('delivered', 'Livrée'), ('cancelled', 'Annulée')], default='pending', max_length=20, verbose_name='Statut')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de commande')),
                ('estimated_delivery_date', models.DateField(blank=True, null=True, verbose_name='Date de livraison estimée')),
            ],
            options={
                'verbose_name': 'Commande',
                'verbose_name_plural': 'Commandes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom du produit')),
                ('name_ar', models.CharField(blank=True, max_length=200, verbose_name='Nom (Arabe)')),
                ('description', models.TextField(verbose_name='Description')),
                ('description_ar', models.TextField(blank=True, verbose_name='Description (Arabe)')),
                ('ingredients', models.TextField(blank=True, verbose_name='Ingrédients')),
                ('ingredients_ar', models.TextField(blank=True, verbose_name='Ingrédients (Arabe)')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Prix (MAD)')),
                ('image', models.ImageField(upload_to='products/', verbose_name='Image principale')),
                ('is_available', models.BooleanField(default=True, verbose_name='Disponible')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.category', verbose_name='Catégorie')),
            ],
            options={
                'verbose_name': 'Produit',
                'verbose_name_plural': 'Produits',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Nom de la variante')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Prix (MAD)')),
                ('stock', models.PositiveIntegerField(default=0, verbose_name='Stock disponible')),
                ('is_default', models.BooleanField(default=False, verbose_name='Variante par défaut')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='store.product')),
            ],
            options={
                'verbose_name': 'Variante de produit',
                'verbose_name_plural': 'Variantes de produit',
                'ordering': ['-is_default', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='products/additional/')),
                ('uploaded_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_images', to='store.product')),
            ],
            options={
                'verbose_name': 'Image supplémentaire',
                'verbose_name_plural': 'Images supplémentaires',
                'ordering': ['uploaded_at'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='default_variant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_for_products', to='store.productvariant', verbose_name='Variante par défaut'),
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='store.order')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='store.productvariant')),
            ],
        ),
        migrations.CreateModel(
            name='CommunityPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('content', models.TextField(verbose_name='Contenu')),
                ('rating', models.PositiveSmallIntegerField(choices=[(5, '★★★★★ - Excellent'), (4, '★★★★☆ - Très bon'), (3, '★★★☆☆ - Bon'), (2, '★★☆☆☆ - Moyen'), (1, '★☆☆☆☆ - Décevant')], verbose_name='Note')),
                ('image', models.ImageField(blank=True, null=True, upload_to='reviews/', verbose_name='Photo')),
                ('is_approved', models.BooleanField(default=True, verbose_name='Approuvé')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Auteur')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.product', verbose_name='Produit lié')),
            ],
            options={
                'verbose_name': 'Avis produit',
                'verbose_name_plural': 'Avis produits',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='store.cart')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.productvariant')),
            ],
        ),
        migrations.AddConstraint(
            model_name='productvariant',
            constraint=models.UniqueConstraint(fields=('product', 'name'), name='unique_variant_name_per_product'),
        ),
    ]
